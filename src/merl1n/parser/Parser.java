/* Generated By:JavaCC: Do not edit this line. Parser.java */
package merl1n.parser;

import java.io.*;
import java.util.*;

import merl1n.es.*;
import merl1n.es.Module;
import merl1n.tool.*;

public class Parser implements ParserConstants {
    /**
     * Reference to project
     */
     protected Project project;

     /**
      * Reference to module
      */
     protected Module module;

     public void setProject(Project project) {
        this.project = project;
     }

     public void setModule(Module module) {
        this.module = module;
     }

  final public void compile() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INTEGER:
      case REAL:
      case TEXT:
      case ASK:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INTEGER:
      case REAL:
      case TEXT:
      case ASK:
        varDeclaration();
        break;
      case IDENTIFIER:
        ruleDefinition();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  final public void varDeclaration() throws ParseException {
    if (jj_2_1(3)) {
      booleanVarDeclaration();
    } else if (jj_2_2(3)) {
      integerVarDeclaration();
    } else if (jj_2_3(3)) {
      realVarDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXT:
      case ASK:
        textVarDeclaration();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void booleanVarDeclaration() throws ParseException {
    Token l, v, val;
    BooleanVariable var;
    l = v = val = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASK:
      jj_consume_token(ASK);
      l = jj_consume_token(TEXT_LITERAL);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(BOOLEAN);
    v = jj_consume_token(IDENTIFIER);
        if (project.getVariables().get(v.image) != null)
            {if (true) throw new SemanticError(token,SemanticError.VARIABLE);}
        var = new BooleanVariable();
        project.getVariables().put(v.image, var);
        module.getVariables().addElement(var);
        if (l != null)
            var.setLabel(l.image.substring(1,l.image.length()-1));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
      val = jj_consume_token(BOOLEAN_LITERAL);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
        if (val != null) {
            var.initialize(new Boolean(val.image));
        }
  }

  final public void integerVarDeclaration() throws ParseException {
    Token l, v, val, item;
    IntegerVariable var;
    Vector range;
    l = v = val = item = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASK:
      jj_consume_token(ASK);
      l = jj_consume_token(TEXT_LITERAL);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(INTEGER);
    v = jj_consume_token(IDENTIFIER);
        if (project.getVariables().get(v.image) != null)
            {if (true) throw new SemanticError(token,SemanticError.VARIABLE);}
        var = new IntegerVariable();
        project.getVariables().put(v.image, var);
        module.getVariables().addElement(var);
        if (l != null)
            var.setLabel(l.image.substring(1,l.image.length()-1));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      jj_consume_token(35);
      item = jj_consume_token(INTEGER_LITERAL);
            range = new Vector();
            range.addElement(new Integer(item.image));
      label_2:
      while (true) {
        jj_consume_token(36);
        item = jj_consume_token(INTEGER_LITERAL);
            range.addElement(new Integer(item.image));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(37);
            var.setRange(range);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
      val = jj_consume_token(INTEGER_LITERAL);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
        if (val != null) {
            var.initialize(new Integer(val.image));
            if (!var.isValid(var.getValue()))
                {if (true) throw new SemanticError(token, SemanticError.ASSIGNMENT);}
        }
  }

  final public void realVarDeclaration() throws ParseException {
    Token l, v, val, item;
    RealVariable var;
    Vector range;
    l = v = val = item = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASK:
      jj_consume_token(ASK);
      l = jj_consume_token(TEXT_LITERAL);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(REAL);
    v = jj_consume_token(IDENTIFIER);
        if (project.getVariables().get(v.image) != null)
            {if (true) throw new SemanticError(token,SemanticError.VARIABLE);}
        var = new RealVariable();
        project.getVariables().put(v.image, var);
        module.getVariables().addElement(var);
        if (l != null)
            var.setLabel(l.image.substring(1,l.image.length()-1));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      jj_consume_token(35);
      item = jj_consume_token(REAL_LITERAL);
            range = new Vector();
            range.addElement(new Float(item.image));
      label_3:
      while (true) {
        jj_consume_token(36);
        item = jj_consume_token(REAL_LITERAL);
            range.addElement(new Float(item.image));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(37);
            var.setRange(range);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
      val = jj_consume_token(REAL_LITERAL);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
        if (val != null) {
            var.initialize(new Float(val.image));
            if (!var.isValid(var.getValue()))
                {if (true) throw new SemanticError(token, SemanticError.ASSIGNMENT);}
        }
  }

  final public void textVarDeclaration() throws ParseException {
    Token l, v, val, item;
    TextVariable var;
    Vector range;
    l = v = val = item = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASK:
      jj_consume_token(ASK);
      l = jj_consume_token(TEXT_LITERAL);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(TEXT);
    v = jj_consume_token(IDENTIFIER);
        if (project.getVariables().get(v.image) != null)
            {if (true) throw new SemanticError(token,SemanticError.VARIABLE);}
        var = new TextVariable();
        project.getVariables().put(v.image, var);
        module.getVariables().addElement(var);
        if (l != null)
            var.setLabel(l.image.substring(1,l.image.length()-1));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      jj_consume_token(35);
      item = jj_consume_token(TEXT_LITERAL);
            range = new Vector();
            range.addElement(item.image.substring(1,item.image.length()-1));
      label_4:
      while (true) {
        jj_consume_token(36);
        item = jj_consume_token(TEXT_LITERAL);
            range.addElement(item.image.substring(1,item.image.length()-1));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(37);
            var.setRange(range);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
      val = jj_consume_token(TEXT_LITERAL);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
        if (val != null) {
            var.initialize(val.image.substring(1,val.image.length()-1));
            if (!var.isValid(var.getValue()))
                {if (true) throw new SemanticError(token, SemanticError.ASSIGNMENT);}
        }
  }

  final public void ruleDefinition() throws ParseException {
    Token id, p;
    Rule rule;
    Condition cond;
    id = p = null;
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      jj_consume_token(38);
      p = jj_consume_token(INTEGER_LITERAL);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
        rule = new Rule();
        rule.setName(id.image);
        if (p != null)
            rule.setPriority(new Integer(p.image).intValue());
        cond = new Condition();
        rule.setCondition(cond);
        module.getRules().insertElement(rule);
    jj_consume_token(IF);
    condition(cond);
    jj_consume_token(THEN);
    actions(rule);
    jj_consume_token(END);
  }

// Condition part of a rule
  final public void condition(Condition cond) throws ParseException {
    BooleanNode booleanNode = new BooleanNode();
    cond.setRoot(booleanNode);
    booleanExpression(booleanNode);
        try {
            if (!(booleanNode.evaluate() instanceof Boolean))
                {if (true) throw new SemanticError(token,SemanticError.TYPE);}
        }
        catch (Exception e) {
            {if (true) throw new SemanticError(token,SemanticError.TYPE);}
        }
  }

  final public void booleanExpression(BooleanNode booleanNode) throws ParseException {
    AndNode andNode = new AndNode();
    BooleanNode currentNode = booleanNode;
    andExpression(andNode);
        currentNode.addChild(andNode);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_5;
      }
      jj_consume_token(OR);
            BooleanNode nextBooleanNode = new BooleanNode();
            currentNode.addChild(nextBooleanNode);
            currentNode = nextBooleanNode;
            AndNode nextAndNode = new AndNode();
            currentNode.addChild(nextAndNode);
      andExpression(nextAndNode);
    }
  }

  final public void andExpression(AndNode andNode) throws ParseException {
    EqualityNode equalityNode = new EqualityNode();
    AndNode currentNode = andNode;
    equalityExpression(equalityNode);
        currentNode.addChild(equalityNode);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      jj_consume_token(AND);
            AndNode nextAndNode = new AndNode();
            currentNode.addChild(nextAndNode);
            currentNode = nextAndNode;
            EqualityNode nextEqualityNode = new EqualityNode();
            currentNode.addChild(nextEqualityNode);
      equalityExpression(nextEqualityNode);
    }
  }

  final public void equalityExpression(EqualityNode equalityNode) throws ParseException {
    Token oper;
    RelationalNode relationalNode = new RelationalNode();
    EqualityNode currentNode = equalityNode;
    relationalExpression(relationalNode);
        currentNode.addChild(relationalNode);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
      case 40:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        oper = jj_consume_token(39);
        break;
      case 40:
        oper = jj_consume_token(40);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            if (oper.image.equals("="))
                currentNode.setOperator(EqualityNode.EQUAL);
            if (oper.image.equals("!="))
                currentNode.setOperator(EqualityNode.NONEQUAL);
            EqualityNode nextEqualityNode = new EqualityNode();
            currentNode.addChild(nextEqualityNode);
            currentNode = nextEqualityNode;
            RelationalNode nextRelationalNode = new RelationalNode();
            currentNode.addChild(nextRelationalNode);
      relationalExpression(nextRelationalNode);
    }
  }

  final public void relationalExpression(RelationalNode relationalNode) throws ParseException {
    Token oper;
    AdditiveNode additiveNode = new AdditiveNode();
    RelationalNode currentNode = relationalNode;
    additiveExpression(additiveNode);
        currentNode.addChild(additiveNode);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
      case 42:
      case 43:
      case 44:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        oper = jj_consume_token(41);
        break;
      case 42:
        oper = jj_consume_token(42);
        break;
      case 43:
        oper = jj_consume_token(43);
        break;
      case 44:
        oper = jj_consume_token(44);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            if (oper.image.equals("<"))
                currentNode.setOperator(RelationalNode.LT);
            if (oper.image.equals(">"))
                currentNode.setOperator(RelationalNode.GT);
            if (oper.image.equals("<="))
                currentNode.setOperator(RelationalNode.LE);
            if (oper.image.equals(">="))
                currentNode.setOperator(RelationalNode.GE);
            RelationalNode nextRelationalNode = new RelationalNode();
            currentNode.addChild(nextRelationalNode);
            currentNode = nextRelationalNode;
            AdditiveNode nextAdditiveNode = new AdditiveNode();
            currentNode.addChild(nextAdditiveNode);
      additiveExpression(nextAdditiveNode);
    }
  }

  final public void additiveExpression(AdditiveNode additiveNode) throws ParseException {
    Token oper;
    MultiplicativeNode multiplicativeNode = new MultiplicativeNode();
    AdditiveNode currentNode = additiveNode;
    multiplicativeExpression(multiplicativeNode);
        currentNode.addChild(multiplicativeNode);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
      case 46:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        oper = jj_consume_token(45);
        break;
      case 46:
        oper = jj_consume_token(46);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            if (oper.image.equals("+"))
                currentNode.setOperator(AdditiveNode.PLUS);
            if (oper.image.equals("-"))
                currentNode.setOperator(AdditiveNode.MINUS);
            AdditiveNode nextAdditiveNode = new AdditiveNode();
            currentNode.addChild(nextAdditiveNode);
            currentNode = nextAdditiveNode;
            MultiplicativeNode nextMultiplicativeNode = new MultiplicativeNode();
            currentNode.addChild(nextMultiplicativeNode);
      multiplicativeExpression(nextMultiplicativeNode);
    }
  }

  final public void multiplicativeExpression(MultiplicativeNode multiplicativeNode) throws ParseException {
    Token oper;
    UnaryNode unaryNode = new UnaryNode();
    MultiplicativeNode currentNode = multiplicativeNode;
    unaryExpression(unaryNode);
        currentNode.addChild(unaryNode);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
      case 48:
      case 49:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        oper = jj_consume_token(47);
        break;
      case 48:
        oper = jj_consume_token(48);
        break;
      case 49:
        oper = jj_consume_token(49);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            if (oper.image.equals("*"))
                currentNode.setOperator(MultiplicativeNode.MUL);
            if (oper.image.equals("/"))
                currentNode.setOperator(MultiplicativeNode.DIV);
            if (oper.image.equals("%"))
                currentNode.setOperator(MultiplicativeNode.MOD);
            MultiplicativeNode nextMultiplicativeNode = new MultiplicativeNode();
            currentNode.addChild(nextMultiplicativeNode);
            currentNode = nextMultiplicativeNode;
            UnaryNode nextUnaryNode = new UnaryNode();
            currentNode.addChild(nextUnaryNode);
      unaryExpression(nextUnaryNode);
    }
  }

  final public void unaryExpression(UnaryNode unaryNode) throws ParseException {
    Token oper;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case 46:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        oper = jj_consume_token(46);
        break;
      case NOT:
        oper = jj_consume_token(NOT);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            if (oper.image.equals("-"))
                unaryNode.setOperator(UnaryNode.MINUS);
            if (oper.image.equals("not"))
                unaryNode.setOperator(UnaryNode.NOT);
            UnaryNode nextUnaryNode = new UnaryNode();
            unaryNode.addChild(nextUnaryNode);
      unaryExpression(nextUnaryNode);
      break;
    case BOOLEAN_LITERAL:
    case INTEGER_LITERAL:
    case REAL_LITERAL:
    case TEXT_LITERAL:
    case IDENTIFIER:
    case 35:
      primaryExpression(unaryNode);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void primaryExpression(UnaryNode unaryNode) throws ParseException {
    Token primary;
    LiteralNode literalNode = new LiteralNode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
      primary = jj_consume_token(BOOLEAN_LITERAL);
        Boolean bool = new Boolean(primary.image);
        literalNode.setValue(bool);
        unaryNode.addChild(literalNode);
      break;
    case INTEGER_LITERAL:
      primary = jj_consume_token(INTEGER_LITERAL);
        Integer integer = new Integer(primary.image);
        literalNode.setValue(integer);
        unaryNode.addChild(literalNode);
      break;
    case REAL_LITERAL:
      primary = jj_consume_token(REAL_LITERAL);
        Float f = new Float(primary.image);
        literalNode.setValue(f);
        unaryNode.addChild(literalNode);
      break;
    case TEXT_LITERAL:
      primary = jj_consume_token(TEXT_LITERAL);
        String text = primary.image.substring(1,primary.image.length()-1);
        literalNode.setValue(text);
        unaryNode.addChild(literalNode);
      break;
    case IDENTIFIER:
      primary = jj_consume_token(IDENTIFIER);
        String name = primary.image;
        if (project.getVariables().get(name) == null) {
            {if (true) throw new SemanticError(token,SemanticError.UNKNOWN);}
        }
        IdentifierNode identifierNode = new IdentifierNode(project.getVariables());
        identifierNode.setName(name);
        unaryNode.addChild(identifierNode);
      break;
    case 35:
      jj_consume_token(35);
        BooleanNode booleanNode = new BooleanNode();
        unaryNode.addChild(booleanNode);
      booleanExpression(booleanNode);
      jj_consume_token(37);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void actions(Rule rule) throws ParseException {
    Vector actions = new Vector();
    Assignment assign;
    TextNode textNode, labelNode;
    Print print;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      assign = assignment();
            actions.addElement(assign);
      break;
    case SEND:
      jj_consume_token(SEND);
      textExpression(textNode = new TextNode());
            print = new Print();
            print.setProject(project);
            print.setExpression(textNode);
            actions.addElement(print);
      break;
    case PRINT:
      jj_consume_token(PRINT);
      textExpression(textNode = new TextNode());
            print = new Print();
            print.setProject(project);
            print.setExpression(textNode);
            actions.addElement(print);
      break;
    case NL:
      jj_consume_token(NL);
            NewLine nl = new NewLine();
            nl.setProject(project);
            actions.addElement(nl);
      break;
    case EXEC:
      jj_consume_token(EXEC);
      textExpression(textNode = new TextNode());
            Exec exec = new Exec();
            exec.setProject(project);
            exec.setExpression(textNode);
            actions.addElement(exec);
      break;
    case STOP:
      jj_consume_token(STOP);
            Stop stop = new Stop();
            stop.setProject(project);
            actions.addElement(stop);
      break;
    case IMAGE:
      jj_consume_token(IMAGE);
      textExpression(labelNode = new TextNode());
      jj_consume_token(AT);
      textExpression(textNode = new TextNode());
            ImageLink imageLink = new ImageLink();
            imageLink.setProject(project);
            imageLink.setLabel(labelNode);
            imageLink.setLocation(textNode);
            actions.addElement(imageLink);
      break;
    case DOCUMENT:
      jj_consume_token(DOCUMENT);
      textExpression(labelNode = new TextNode());
      jj_consume_token(AT);
      textExpression(textNode = new TextNode());
            DocLink docLink = new DocLink();
            docLink.setProject(project);
            docLink.setLabel(labelNode);
            docLink.setLocation(textNode);
            actions.addElement(docLink);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_11;
      }
      jj_consume_token(36);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        assign = assignment();
                actions.addElement(assign);
        break;
      case SEND:
        jj_consume_token(SEND);
        textExpression(textNode = new TextNode());
                print = new Print();
                print.setProject(project);
                print.setExpression(textNode);
                actions.addElement(print);
        break;
      case PRINT:
        jj_consume_token(PRINT);
        textExpression(textNode = new TextNode());
                print = new Print();
                print.setProject(project);
                print.setExpression(textNode);
                actions.addElement(print);
        break;
      case NL:
        jj_consume_token(NL);
                NewLine nl = new NewLine();
                nl.setProject(project);
                actions.addElement(nl);
        break;
      case EXEC:
        jj_consume_token(EXEC);
        textExpression(textNode = new TextNode());
                Exec exec = new Exec();
                exec.setProject(project);
                exec.setExpression(textNode);
                actions.addElement(exec);
        break;
      case STOP:
        jj_consume_token(STOP);
                Stop stop = new Stop();
                stop.setProject(project);
                actions.addElement(stop);
        break;
      case IMAGE:
        jj_consume_token(IMAGE);
        textExpression(labelNode = new TextNode());
        jj_consume_token(AT);
        textExpression(textNode = new TextNode());
                ImageLink imageLink = new ImageLink();
                imageLink.setProject(project);
                imageLink.setLabel(labelNode);
                imageLink.setLocation(textNode);
                actions.addElement(imageLink);
        break;
      case DOCUMENT:
        jj_consume_token(DOCUMENT);
        textExpression(labelNode = new TextNode());
        jj_consume_token(AT);
        textExpression(textNode = new TextNode());
                DocLink docLink = new DocLink();
                docLink.setProject(project);
                docLink.setLabel(labelNode);
                docLink.setLocation(textNode);
                actions.addElement(docLink);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        rule.setActions(actions);
  }

  final public Assignment assignment() throws ParseException {
    Token id;
    Variable var;
    Assignment assign = null;
    id = jj_consume_token(IDENTIFIER);
        if ((var = (Variable) project.getVariables().get(id.image)) == null)
            {if (true) throw new SemanticError(token,SemanticError.UNKNOWN);}
        switch (var.getType()) {
            case Public.BOOLEAN:
                assign = booleanAssignment();
                break;
            case Public.INTEGER:
            case Public.REAL:
                assign = numberAssignment();
                break;
            case Public.TEXT:
                assign = textAssignment();
                break;
        }
        assign.setVariable(var);
        {if (true) return assign;}
    throw new Error("Missing return statement in function");
  }

  final public Assignment booleanAssignment() throws ParseException {
    Assignment assign;
    BooleanNode booleanNode;
    jj_consume_token(34);
    booleanExpression(booleanNode = new BooleanNode());
        assign = new BooleanAssignment();
        ((BooleanAssignment) assign).setExpression(booleanNode);
        {if (true) return assign;}
    throw new Error("Missing return statement in function");
  }

  final public Assignment numberAssignment() throws ParseException {
    Assignment assign;
    NumericalNode numericalNode;
    jj_consume_token(34);
    numericalExpression(numericalNode = new NumericalNode());
        assign = new NumberAssignment();
        ((NumberAssignment) assign).setExpression(numericalNode);
        {if (true) return assign;}
    throw new Error("Missing return statement in function");
  }

  final public Assignment textAssignment() throws ParseException {
    Assignment assign;
    TextNode textNode;
    jj_consume_token(34);
    textExpression(textNode = new TextNode());
        assign = new TextAssignment();
        ((TextAssignment) assign).setExpression(textNode);
        {if (true) return assign;}
    throw new Error("Missing return statement in function");
  }

  final public void numericalExpression(NumericalNode numericalNode) throws ParseException {
    AdditiveNode additiveNode = new AdditiveNode();
    numericalNode.addChild(additiveNode);
    additiveExpression(additiveNode);
        try {
            if (!(numericalNode.evaluate() instanceof Number))
                {if (true) throw new SemanticError(token,SemanticError.TYPE);}
        }
        catch (Exception e) {
            {if (true) throw new SemanticError(token,SemanticError.TYPE);}
        }
  }

  final public void textExpression(TextNode textNode) throws ParseException {
    Token primary;
    LiteralNode literalNode;
    IdentifierNode identifierNode;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
      primary = jj_consume_token(BOOLEAN_LITERAL);
            Boolean bool = new Boolean(primary.image);
            literalNode = new LiteralNode();
            literalNode.setValue(bool);
            textNode.addChild(literalNode);
      break;
    case INTEGER_LITERAL:
      primary = jj_consume_token(INTEGER_LITERAL);
            Integer integer = new Integer(primary.image);
            literalNode = new LiteralNode();
            literalNode.setValue(integer);
            textNode.addChild(literalNode);
      break;
    case REAL_LITERAL:
      primary = jj_consume_token(REAL_LITERAL);
            Float f = new Float(primary.image);
            literalNode = new LiteralNode();
            literalNode.setValue(f);
            textNode.addChild(literalNode);
      break;
    case TEXT_LITERAL:
      primary = jj_consume_token(TEXT_LITERAL);
            String text = primary.image.substring(1,primary.image.length()-1);
            literalNode = new LiteralNode();
            literalNode.setValue(text);
            textNode.addChild(literalNode);
      break;
    case IDENTIFIER:
      primary = jj_consume_token(IDENTIFIER);
            String name = primary.image;
            if (project.getVariables().get(name) == null)
                {if (true) throw new SemanticError(token,SemanticError.UNKNOWN);}
            identifierNode = new IdentifierNode(project.getVariables());
            identifierNode.setName(name);
            textNode.addChild(identifierNode);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_12;
      }
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN_LITERAL:
        primary = jj_consume_token(BOOLEAN_LITERAL);
                Boolean bool = new Boolean(primary.image);
                literalNode = new LiteralNode();
                literalNode.setValue(bool);
                textNode.addChild(literalNode);
        break;
      case INTEGER_LITERAL:
        primary = jj_consume_token(INTEGER_LITERAL);
                Integer integer = new Integer(primary.image);
                literalNode = new LiteralNode();
                literalNode.setValue(integer);
                textNode.addChild(literalNode);
        break;
      case REAL_LITERAL:
        primary = jj_consume_token(REAL_LITERAL);
                Float f = new Float(primary.image);
                literalNode = new LiteralNode();
                literalNode.setValue(f);
                textNode.addChild(literalNode);
        break;
      case TEXT_LITERAL:
        primary = jj_consume_token(TEXT_LITERAL);
                String text = primary.image.substring(1,primary.image.length()-1);
                literalNode = new LiteralNode();
                literalNode.setValue(text);
                textNode.addChild(literalNode);
        break;
      case IDENTIFIER:
        primary = jj_consume_token(IDENTIFIER);
                String name = primary.image;
                if (project.getVariables().get(name) == null)
                    {if (true) throw new SemanticError(token,SemanticError.UNKNOWN);}
                identifierNode = new IdentifierNode(project.getVariables());
                identifierNode.setName(name);
                textNode.addChild(identifierNode);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_3();
    jj_save(2, xla);
    return retval;
  }

  final private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(34)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(ASK)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(TEXT_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(ASK)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(TEXT_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(REAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(ASK)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(TEXT_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(BOOLEAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(35)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(35)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(34)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(34)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  public ParserTokenManager token_source;
  ASCII_UCodeESC_CharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[37];
  final private int[] jj_la1_0 = {0x8001f000,0x8001f000,0x18000,0x10000,0x0,0x10000,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x10000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0xa0000b80,0x80000b80,0x83f80000,0x0,0x83f80000,0x80000b80,0x0,0x80000b80,};
  final private int[] jj_la1_1 = {0x0,0x0,0x0,0x0,0x4,0x0,0x10,0x8,0x4,0x0,0x10,0x8,0x4,0x0,0x10,0x8,0x4,0x40,0x0,0x0,0x180,0x180,0x1e00,0x1e00,0x6000,0x6000,0x38000,0x38000,0x4000,0x4008,0x8,0x0,0x10,0x0,0x0,0x2000,0x0,};
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Parser(java.io.InputStream stream) {
    jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enm = jj_expentries.elements(); enm.hasMoreElements();) {
        int[] oldentry = (int[])(enm.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[50];
    for (int i = 0; i < 50; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 37; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
